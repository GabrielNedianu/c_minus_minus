/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
   	protected Lexer lexer;
  	protected MultiTree syntaxTree = new MultiTree(); 
	
 	 public MultiTree getSyntaxTree()
  	{
		return syntaxTree;
  	}
  	protected MultiTreeNode createDeclarationNode(MultiTreeNode declaration) { throw new UnsupportedOperationException();}
 	protected MultiTreeNode createFunctionDeclarationNode(MultiTreeNode typeSpecifier, String identifierName, MultiTreeNode paramsList, MultiTreeNode compoundStatement) { throw new UnsupportedOperationException(); }
  	protected MultiTreeNode createTypeSpecifier(String typeName){ throw new UnsupportedOperationException();  }
	protected MultiTreeNode createListNode(String listName, MultiTreeNode firstChild){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createVarDeclaration(MultiTreeNode typeSpecifier, String identifierName, Integer value ){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createCompoundStatement(MultiTreeNode declarations, MultiTreeNode instructions){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createIfStatement(String identifier, MultiTreeNode ifInstructions, MultiTreeNode elseInstructions){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createIfStatement(MultiTreeNode condition, MultiTreeNode ifInstructions, MultiTreeNode elseInstructions){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createStatement(String operation, String identifier, MultiTreeNode exp) {throw new UnsupportedOperationException();  }
	protected MultiTreeNode createExpression(MultiTreeNode exp1, String operation, MultiTreeNode exp2) {throw new UnsupportedOperationException();  }
	protected MultiTreeNode createAtomExpression(String operation, MultiTreeNode atom) {throw new UnsupportedOperationException();  }
	protected MultiTreeNode createAtomExpression(MultiTreeNode atom) {throw new UnsupportedOperationException();  }
	protected MultiTreeNode createAtom(MultiTreeNode exp) {throw new UnsupportedOperationException();  }
	protected MultiTreeNode createAtom(String value) {throw new UnsupportedOperationException();  }
	protected MultiTreeNode createSubscriptExpr(String identifier, MultiTreeNode expression) {throw new UnsupportedOperationException();  }
	protected MultiTreeNode createReturnStatement(MultiTreeNode exp) {throw new UnsupportedOperationException();  }
	protected MultiTreeNode createVarArrDeclaration(MultiTreeNode typeSpecifier, String identifierName, Integer value ){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createBlock(MultiTreeNode declList, MultiTreeNode stmtList) {throw new UnsupportedOperationException();  }
 	protected MultiTreeNode createFunctionCallNode(String id, MultiTreeNode actualList) {throw new UnsupportedOperationException();  }
 	protected MultiTreeNode createParameters(MultiTreeNode params){throw new UnsupportedOperationException();  }
 	protected MultiTreeNode createAtom(Integer value) {throw new UnsupportedOperationException();  }
	protected MultiTreeNode createAtom(Boolean value) {throw new UnsupportedOperationException();  }
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal  			INTEGER,BOOL,VOID,TRUE,FALSE,IF,ELSE,WHILE,RETURN,CIN,COUT;
terminal			QUATATIONMARK,EQ,PLUS,MINUS,TIMES,DIVISION,LEFTSHIFT,RIGHTSHIFT,LESS,GREATER,LESSEQ,GREATEREQ,EQEQ,NOTEQ;
terminal			OR,AND,NOT,LEFTCURLY,RIGHTCURLY,LEFT,RIGHT,LEFTSQ,RIGHTSQ,COMMA,SEMI;
terminal String 	IDENTIFIER;			  // identifer
terminal String		STRING;				  // string for our scanner
terminal Integer    INTEGER_VALUE;        // our scanner provides numbers as integers
terminal Boolean 	BOOLEAN_VALUE;		  // boolean values

/* Non terminals */


non terminal MultiTreeNode  program, varDecl, fnDecl, type, parameters, block, formalsList, formalDecl, declList, stmtList, stmt, exp;
non terminal MultiTreeNode  subscriptExpr, fnCallStmt, atom, fnCallExpr, actualList;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES, DIVISION;

/* The grammar rules */
program
	::= program:p varDecl:varD				{: RESULT = p; syntaxTree.addChildNode(varD); :}
	|	program:p fnDecl:fnD				{: RESULT = p; syntaxTree.addChildNode(fnD); :}
	|	/* empty */							{: RESULT = syntaxTree.create("Program"); :}
	;
	
varDecl
	::= type:t IDENTIFIER:id SEMI											{: RESULT = createVarDeclaration(t, id, 0); :}	
	| type:t IDENTIFIER:id LEFTSQ INTEGER_VALUE:val RIGHTSQ SEMI			{: RESULT = createVarArrDeclaration(t, id, val); :}	
	;
	
type
	::= INTEGER		{: RESULT = createTypeSpecifier("INTEGER"); :}
	| BOOL 			{: RESULT = createTypeSpecifier("BOOL"); :}
	| VOID			{: RESULT = createTypeSpecifier("VOID"); :}
	;

fnDecl
	::= type:t IDENTIFIER:id parameters:para block:blck		{: RESULT = createFunctionDeclarationNode(t, id, para, blck); :}
	;
	
parameters
	::= LEFT RIGHT									{: RESULT = createParameters(null); :}
	| LEFT formalsList:frmL RIGHT					{: RESULT = createParameters(frmL); :}
	;
	
formalsList
	::= formalDecl:frmD								{: RESULT = createListNode("Formals List", frmD); :}
	| formalsList:frmL COMMA formalDecl:frmD		{: RESULT = frmL; RESULT.addChild(frmD); :}
	;
	
formalDecl
	::= type:t IDENTIFIER:id							{: RESULT = createVarDeclaration(t, id, null); :}
	;
	
block
	::= LEFTCURLY declList:dcL stmtList:stmtL RIGHTCURLY		{: RESULT = createBlock(dcL,stmtL); :}	
	;
	
declList
	::= declList:dcL varDecl:varD							{: RESULT = dcL; RESULT.addChild(varD); :}
	| /* empty */									{: RESULT = createListNode("Declarations List", null); :}
	;

stmtList
	::= stmtList:StmL stmt:stm								{: RESULT = StmL; RESULT.addChild(stm); :}	
	| /* empty */									{: RESULT = createListNode("Instructions List", null); :}
	;
	
stmt
	::= CIN RIGHTSHIFT IDENTIFIER:id SEMI						{: RESULT = createStatement("CIN", id, null); :}
	| CIN RIGHTSHIFT IDENTIFIER:id LEFTSQ exp:e RIGHTSQ SEMI	{: RESULT = createStatement("CIN", id, e); :}
	| COUT LEFTSHIFT exp:e SEMI									{: RESULT = createStatement("COUT", null, e); :}
	| subscriptExpr EQ exp:e SEMI							{: RESULT = createStatement("Subscript Expr", null, e); :}
	| IDENTIFIER:id EQ exp:e SEMI							{: RESULT = createStatement("EQ", id, e); :}
	| IF LEFT exp:e RIGHT block:blck						{: RESULT = createIfStatement(e, blck, null); :}
	| IF LEFT exp:e RIGHT block:blck1 ELSE block:blck2		{: RESULT = createIfStatement(e, blck1, blck2); :}
	| WHILE LEFT exp:e RIGHT block:blck						{: RESULT = createStatement("While", null, blck); :}
	| RETURN exp:e SEMI										{: RESULT = createReturnStatement(e); :}
	| RETURN SEMI											{: RESULT = createReturnStatement(null); :}
	| fnCallStmt:fn SEMI									{: RESULT = createStatement("FnCall", null, fn); :}
	;	

exp
	::= exp:exp1 PLUS exp:exp2		{: RESULT = createExpression(exp1, "Plus", exp2); :}
	| exp:exp1 MINUS exp:exp2		{: RESULT = createExpression(exp1, "Minus", exp2); :}
	| exp:exp1 TIMES exp:exp2		{: RESULT = createExpression(exp1, "Times", exp2); :}
	| exp:exp1 DIVISION exp:exp2	{: RESULT = createExpression(exp1, "Division", exp2); :}
	| NOT exp:exp2					{: RESULT = createExpression(null, "Not", exp2); :}
	| exp:exp1 AND exp:exp2			{: RESULT = createExpression(exp1, "And", exp2); :}
	| exp:exp1 OR exp:exp2			{: RESULT = createExpression(exp1, "Or", exp2); :}
	| exp:exp1 EQEQ exp:exp2		{: RESULT = createExpression(exp1, "Equal Equal", exp2); :}
	| exp:exp1 NOTEQ exp:exp2		{: RESULT = createExpression(exp1, "Not Equal", exp2); :}
	| exp:exp1 LESS exp:exp2		{: RESULT = createExpression(exp1, "Less", exp2); :}
	| exp:exp1 GREATER exp:exp2		{: RESULT = createExpression(exp1, "Greater", exp2); :}
	| exp:exp1 LESSEQ exp:exp2		{: RESULT = createExpression(exp1, "Less or Equal", exp2); :}
	| exp:exp1 GREATEREQ exp:exp2	{: RESULT = createExpression(exp1, "Greater or Equal", exp2); :}
	| MINUS atom:at					{: RESULT = createAtomExpression("Minus", at); :}
	| atom:at						{: RESULT = createAtomExpression(at); :}
	;
	
atom
	::= INTEGER_VALUE:intgr	{: RESULT = createAtom(intgr); :}
	| STRING:str			{: RESULT = createAtom(str); :}
	| BOOLEAN_VALUE:bool	{: RESULT = createAtom(bool); :}
	| LEFT exp:e RIGHT		{: RESULT = createAtom(e); :}
	| fnCallExpr:fnCall		{: RESULT = createAtom(fnCall); :}
	| subscriptExpr:subsc	{: RESULT = createAtom(subsc); :}
	| IDENTIFIER:id			{: RESULT = createAtom(id); :}
	;
	
	
fnCallExpr
	::= IDENTIFIER:id RIGHT LEFT				{: RESULT = createFunctionCallNode(id, null); :}
	| IDENTIFIER:id RIGHT actualList:aL LEFT	{: RESULT = createFunctionCallNode(id, aL); :}
	;

fnCallStmt
	::= IDENTIFIER:id RIGHT LEFT				{: RESULT = createFunctionCallNode(id, null); :}
	| IDENTIFIER:id RIGHT actualList:aL LEFT	{: RESULT = createFunctionCallNode(id, aL); :}
	;
	
actualList
	::= exp:e							{: RESULT = createListNode("Actual exp List", e); :}
	| actualList:actL COMMA exp:e		{: RESULT = actL; actL.addChild(e); :}
	;

subscriptExpr
	::= IDENTIFIER:id LEFTSQ exp:e RIGHTSQ		{: RESULT = createSubscriptExpr(id, e); :}
	;		
